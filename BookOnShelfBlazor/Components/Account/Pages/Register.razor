@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BookOnShelfBlazor.Data
@using BookOnShelfBlazor.Data.Models


@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext Context


<PageTitle>Register</PageTitle>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-9">
            <h1 class="text-center">Register</h1>
            <br />
            <div class="row">
                <div class="col-md-12">
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                        <h2>Create a new account.</h2>
                        <hr />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control custom-outline-color" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control custom-outline-color" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="password">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control custom-outline-color" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="confirm-password">Confirm Password</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.FirstName" class="form-control custom-outline-color" autocomplete="given-name" aria-required="true" placeholder="John" />
                            <label for="first-name">First Name</label>
                            <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.MiddleName" class="form-control custom-outline-color" autocomplete="additional-name" placeholder="Middle Name" />
                            <label for="middle-name">Middle Name</label>
                            <ValidationMessage For="() => Input.MiddleName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.LastName" class="form-control custom-outline-color" autocomplete="family-name" aria-required="true" placeholder="Doe" />
                            <label for="last-name">Last Name</label>
                            <ValidationMessage For="() => Input.LastName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="Input.PhoneNumber" class="form-control custom-outline-color" autocomplete="tel" aria-required="true" placeholder="0612345678" />
                            <label for="phone-number">Phone Number</label>
                            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputDate @bind-Value="Input.DateOfBirth" class="form-control custom-outline-color" aria-required="true" />
                            <label for="date-of-birth">Date of Birth</label>
                            <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.City" class="form-control custom-outline-color" autocomplete="address-level2" aria-required="true" placeholder="Amsterdam" />
                            <label for="city">City</label>
                            <ValidationMessage For="() => Input.City" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Street" class="form-control custom-outline-color" autocomplete="address-line1" aria-required="true" placeholder="Main Street" />
                            <label for="street">Street</label>
                            <ValidationMessage For="() => Input.Street" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="Input.HouseNumber" class="form-control custom-outline-color" autocomplete="address-line2" aria-required="true" placeholder="123" />
                            <label for="house-number">House Number</label>
                            <ValidationMessage For="() => Input.HouseNumber" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.HouseNumberAddition" class="form-control custom-outline-color" autocomplete="address-line2" placeholder="A" />
                            <label for="house-number-addition">House Number Addition</label>
                            <ValidationMessage For="() => Input.HouseNumberAddition" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.PostalCode" class="form-control custom-outline-color" autocomplete="postal-code" aria-required="true" placeholder="1234AB" />
                            <label for="postal-code">Postal Code</label>
                            <ValidationMessage For="() => Input.PostalCode" class="text-danger" />
                        </div>
                        <hr />
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private UserInfo UserInfo { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        await UserManager.AddToRoleAsync(user, "User");


        UserInfo? userInfo = await AddUserInfo();
        if (userInfo != null)
        {
            user.UserInfo = userInfo;
            await UserManager.UpdateAsync(user);
        }
        else
        {
            identityErrors = new List<IdentityError> { new IdentityError { Code = "UserInfoError", Description = "Error while adding user info" } };
            return;
        }
        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private async Task<UserInfo?> AddUserInfo()
    {
        DateTime ChosenDateTime = Input.DateOfBirth;
        int Year = ChosenDateTime.Year;
        int Month = ChosenDateTime.Month;
        int Day = ChosenDateTime.Day;

        DateOnly ChosenDate = new DateOnly(Year, Month, Day);

        var UserInfo = new UserInfo
            {
                FirstName = Input.FirstName,
                MiddleName = Input.MiddleName,
                LastName = Input.LastName,
                PhoneNumber = Input.PhoneNumber,

                DateOfBirth = ChosenDate,
                City = Input.City,
                Street = Input.Street,
                HouseNumber = Input.HouseNumber,
                HouseNumberAddition = Input.HouseNumberAddition,
                PostalCode = Input.PostalCode
            };
        Context.UserInfo.Add(UserInfo);


        try
        {
            await Context.SaveChangesAsync();
            return UserInfo;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return null;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Display(Name = "Middle Name")]
        public string MiddleName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [Display(Name = "Phone Number")]
        public int PhoneNumber { get; set; }

        [Required]
        [Display(Name = "Date of Birth")]
        public DateTime DateOfBirth { get; set; }

        [Required]
        [Display(Name = "City")]
        public string City { get; set; } = "";

        [Required]
        [Display(Name = "Street")]
        public string Street { get; set; } = "";

        [Required]
        [Display(Name = "House Number")]
        public int HouseNumber { get; set; }

        [Display(Name = "House Number Addition")]
        public string HouseNumberAddition { get; set; } = "";

        [Required]
        [Display(Name = "Postal Code")]
        public string PostalCode { get; set; } = "";
    }
}
