@page "/EditBook/{BookId:int}"
@using Microsoft.EntityFrameworkCore
@using BookOnShelfBlazor.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Identity
@using BookOnShelfBlazor.Data.Models

@inject ApplicationDbContext Context

@inject NavigationManager NavigationManager

@rendermode InteractiveServer
<PageTitle>Edit a Book!</PageTitle>
<div class="row justify-content-center">
    <h1 class="text-center">Edit: @Book.Title</h1>
    <div class="col-md-6">
        <section>
            <EditForm Model="Book" OnSubmit="EditBooks" FormName="EditBook">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <hr />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Book.Title" class="form-control custom-outline-color" placeholder="Title" />
                                <label for="Title" class="form-label">Title</label>
                            </div>
                            <label for="Writers" class="form-label">Writers:(Choose up to 2)</label>
                            <br />
                            <button @onclick="ToggleCheckBoxList" @onclick:preventDefault class="btn btn-primary">Add Writers</button>
                            <button class="btn btn-secondary ml-2 jump-animation" @onclick="ToggleAddWriterToTrue" @onclick:preventDefault><i class="bi bi-plus"></i></button>
                            <br />
                            @if (ShowCheckBoxList)
                            {
                                <hr />
                                @if (Writers != null)
                                {
                                    @foreach (var writer in Writers)
                                    {
                                        bool isChecked = SelectedWriters.Contains(writer.WriterId); // Check if writer is selected
                                        <label>
                                            <input type="checkbox" value="@writer.WriterId" checked="@isChecked" @onclick="() => ToggleWriterSelection(writer.WriterId)" /> @writer.WriterId - @writer.FirstName @(writer.MiddleName != null ? writer.MiddleName + " " : "") @writer.LastName
                                        </label>
                                        <br />
                                    }
                                    <hr />
                                }
                                else
                                {
                                    <label>No writers available</label>
                                }
                            }
                            <div class="form-floating mb-3">
                                <InputTextArea @bind-Value="Book.Description" class="form-control custom-outline-color" placeholder="Description" maxlength="800" />
                                <label for="Description" class="form-label">Description</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Book.ISBN" class="form-control custom-outline-color" placeholder="Author" maxlength="13" />
                                <label for="ISBN" class="form-label">ISBN</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputNumber @bind-Value="Book.AmountOfPages" class="form-control custom-outline-color" placeholder="Year" />
                                <label for="AmountOfPages" class="form-label">Amount of pages</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputNumber @bind-Value="Book.AmountAvailable" class="form-control custom-outline-color" placeholder="Author" />
                                <label for="AmountAvailable" class="form-label">Amount available</label>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6 d-flex align-items-center">
                                    <InputSelect style="margin-top:-17px;" @bind-Value="SelectedGenre" class="form-control custom-outline-color">
                                        <option value="">Select a genre</option>
                                        @if (Genres != null)
                                        {
                                            @foreach (var genre in Genres)
                                            {
                                                @if (genre.GenreId == Book.GenreId.GenreId)
                                                {
                                                    <option value="@genre.GenreId" selected>@genre.GenreName</option>
                                                }
                                                else
                                                {
                                                    <option value="@genre.GenreId">@genre.GenreName</option>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <option value="">No genres available</option>
                                        }
                                    </InputSelect>
                                    <button style="margin-left:5px;" class="btn btn-secondary ml-2 jump-animation" @onclick="ToggleGenresToTrue" @onclick:preventDefault><i class="bi bi-plus"></i></button>
                                </div>
                                <div class="col-md-6 d-flex align-items-center">
                                    <InputSelect style="margin-top:-17px;" @bind-Value="SelectedLanguage" class="form-control custom-outline-color">
                                        <option value="">Select a language</option>
                                        @if (Languages != null)
                                        {
                                            @foreach (var language in Languages)
                                            {
                                                @if (language.LanguageId == Book.LanguageId.LanguageId)
                                                {
                                                    <option value="@language.LanguageId" selected>@language.LanguageName</option>
                                                }
                                                else
                                                {
                                                    <option value="@language.LanguageId">@language.LanguageName</option>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <option value="">No languages available</option>
                                        }
                                    </InputSelect>
                                    <button style="margin-left:5px;" class="btn btn-secondary ml-2 jump-animation" @onclick="ToggleLanguagesToTrue" @onclick:preventDefault><i class="bi bi-plus"></i></button>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <label for="FrontCover" class="form-label">Front cover: (optional)</label>
                                <InputFile OnChange="HandleFrontCoverUpload" class="form-control custom-outline-color" />
                            </div>
                            <br />
                            <div class="col-md-12">
                                <label for="BackCover" class="form-label">Back cover: (optional)</label>
                                <InputFile OnChange="HandleBackCoverUpload" class="form-control custom-outline-color" />
                            </div>
                            <hr />
                            <br />
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Add a book</button>
                        </div>

                    </div>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    [Parameter]
    public int BookId { get; set; }

    Books Book = new Books();

    private List<Writers> CurrentWriters;
    private List<int> SelectedWriters = new List<int>();

    List<Genres> Genres;
    List<Languages> Languages;
    List<Writers> Writers;

    private bool ShowCheckBoxList = false;

    private bool ShowAddWriterForm = false;
    private bool ShowLanguageForm = false;
    private bool ShowGenreForm = false;

    string SelectedGenre { get; set; }
    string SelectedLanguage { get; set; }

    private byte[] TemporaryPlaceForFrontImage;
    private byte[] TemporaryPlaceForBackImage;

    protected async override Task OnInitializedAsync()
    {
        Book = await GetBook();

        CurrentWriters = await Context.BooksWriters
           .Include(bw => bw.WritersId)
           .Where(bw => bw.Bookid == Book)
           .Select(bw => bw.WritersId)
           .ToListAsync();

        Genres = await Context.Genres.OrderBy(g => g.GenreName).ToListAsync();
        Languages = await Context.Languages.OrderBy(l => l.LanguageName).ToListAsync();
        Writers = await Context.Writers.OrderBy(w => w.FirstName).ToListAsync();

        SelectedGenre = Book.GenreId.GenreName.ToString();
        SelectedLanguage = Book.LanguageId.LanguageName.ToString();
    }

    private void ToggleCheckBoxList()
    {
        ShowCheckBoxList = !ShowCheckBoxList;
    }

    private void ToggleAddWriterToTrue()
    {
        ShowAddWriterForm = true;
    }

    private void ToggleWritersToFalse()
    {
        ShowAddWriterForm = false;
    }

    private void ToggleLanguagesToTrue()
    {
        ShowLanguageForm = true;
    }

    private void ToggleLanguagesToFalse()
    {
        ShowLanguageForm = false;
    }

    private void ToggleGenresToTrue()
    {
        ShowGenreForm = true;
    }

    private void ToggleGenresToFalse()
    {
        ShowGenreForm = false;
    }

    private void ToggleWriterSelection(int WriterId)
    {
        if (SelectedWriters.Contains(WriterId))
        {
            SelectedWriters.Remove(WriterId); //unselect een schrijver van de checkboxlist
        }
        else
        {
            SelectedWriters.Add(WriterId); //select een schrijver van de checkboxlist
        }
    }

    private Writers GetWriterById(int writerId)
    {
        if (Writers != null)
        {
            return Writers.FirstOrDefault(w => w.WriterId == writerId);
        }
        return null;
    }

    private Languages GetSelectedLanguage()
    {
        if (Languages != null)
        {
            return Languages.FirstOrDefault(l => l.LanguageId == int.Parse(SelectedLanguage));
        }
        return null;
    }

    private Genres GetSelectedGenre()
    {
        if (Genres != null)
        {
            return Genres.FirstOrDefault(g => g.GenreId == int.Parse(SelectedGenre));
        }
        return null;
    }

    public async Task HandleFrontCoverUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var ImageFile = e.File;
            TemporaryPlaceForFrontImage = new byte[ImageFile.Size];

            await ImageFile.OpenReadStream().ReadAsync(TemporaryPlaceForFrontImage);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error uploading front picture HAUFHWAUHFUAHFUAHWUHAWUFHWA" + ex);
        }
    }

    public async Task HandleBackCoverUpload(InputFileChangeEventArgs e)
    {
        try
        {

            var ImageFile = e.File;
            TemporaryPlaceForBackImage = new byte[ImageFile.Size];

            await ImageFile.OpenReadStream().ReadAsync(TemporaryPlaceForBackImage);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error uploading back picture HAUFHWAUHFUAHFUAHWUHAWUFHWA" + ex);
        }
    }

    public async Task<Books> GetBook()
    {
        try
        {
            return await Context.Books.FindAsync(BookId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
        return await Context.Books.FindAsync(BookId);
    }

    private async Task EditBooks()
    {

    }
}
