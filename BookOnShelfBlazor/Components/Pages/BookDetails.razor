@page "/BookDetails/{BookId:int}"

@using Microsoft.EntityFrameworkCore
@using BookOnShelfBlazor.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Identity
@using BookOnShelfBlazor.Data.Models
@using System.Security.Claims


@inject ApplicationDbContext Context

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer

<h3 class="text-center">Book Details</h3>
<AuthorizeView Roles="User">
 <div class="container" style="display:flex;">
        @if (Book != null)
        {
            <div class="card">
                <div class="card-body">
                    <div class="alert-message">
                        @if (Book.IsUnavailable == true)
                        {
                            <div class="alert alert-danger w-100"> This book is not available</div>
                        }
                        else if (Book.AmountAvailable == 0)
                        {
                            <div class="alert alert-warning w-100"> This book is not available at the moment please wait until one is available</div>
                        }
                        else
                        {
                            <div class="alert alert-success w-100"> This book is available</div>
                        }
                    </div>
                    <div class="hr-inbetween">
                        <hr />
                    </div>
                    <div class="image-container" style="width:18%; height:375px;">
                        @if (ShowFrontImage)
                        {
                            <img src="@(GetImageSource(Book.FrontCover))" style="height:275px" class="front-cover" alt="No front cover available" />
                        }
                        else
                        {
                            <img src="@(GetImageSource(Book.BackCover))" style="height:275px" class="back-cover" alt="Back Cover" />
                        }
                        <hr />
                        <button class="toggle-picture-button" @onclick="ToggleImage"><i class="bi bi-arrow-left-right"></i></button>
                    </div>
                    <div class="BookDescription" style="max-width:50%">
                        <div class="text-center">
                            <h4 class="card-title">@Book.Title</h4>
                        </div>
                        <hr />
                        <p class="w-100">@Book.Description</p>
                    </div>
                    <div class="BookInfo" style="max-width:25%">
                        <div class="text-center">
                            <h4 class="card-title">Book Info</h4>
                            <hr />
                            <p>Amount of pages:<br />@Book.AmountOfPages</p>
                            <hr />
                            <p>ISBN:<br />@Book.ISBN</p>
                            <hr />
                            <p>Genre:<br />@Book.GenreId.GenreName</p>
                            <hr />
                            <p>Language:<br />@Book.LanguageId.LanguageName</p>
                            <hr />
                        </div>
                    </div>
                    <div class="hr-inbetween">
                        <hr />
                    </div>
                    @foreach (var writer in Writers)
                    {
                        <div class="WriterInfo">
                            <hr />
                            <div class="image-container-pfp">
                                <img style="width:100%; height:200px" src="@(GetImageSource(writer.ProfilePicture))" class="writer-image" alt="Writer Image" />
                                <hr />
                                <div class="text-center w-100">
                                    @writer.FirstName @if (writer.MiddleName != null)
                                    {
                                        @writer.MiddleName
                                    } @writer.LastName
                                </div>
                            </div>

                            <div class="AboutTheWriter">
                                <div class="text-center">
                                    <h4>About the writer:</h4>
                                </div>
                                <hr />
                                <p>@writer.Description</p>
                            </div>
                        </div>
                    }
                    <div class="hr-inbetween">
                        <hr />
                    </div>
                    <div class="Reviews-container">
                        <div class="w-100 text-center">
                            <h4>Reviews:@Reviews.Count</h4>
                        </div>
                        <hr />
                        <div class="Reviews">
                           <EditForm Model="review" OnSubmit="AddReview">
                                <ChildContent Context="editFormContext">
                                    <img class="rounded-circle ImagePFP" src="@(GetImageSource(user?.ProfilePicture))" />
                                    <InputText class="custom-margin" @bind-Value="NewReview" placeholder="Write a review" style="width:89%" />
                                    <button class="btn-primary delete-book-btn">
                                        <i class="bi bi-chat-left"></i>
                                    </button>
                                </ChildContent>
                            </EditForm>
                            <hr />
                            @foreach (BookReviews review in Reviews)
                            {
                            
                                    <div class="Review">
                                        <div class="card-review">
                                            <div class="card-body-review">
                                                <img class="rounded-circle ImagePFP" src="@(GetImageSource(review.UserId.ProfilePicture))" />
                                                <div class="The-Review">
                                                    <p class="">@review.UserId.UserName Commented: <br /><hr /> @review.Review</p>
                                                </div>
                                                <div class="ActionButtons">
                                                    @if (review.UserId.Id == authUser.FindFirst(ClaimTypes.NameIdentifier).Value)
                                                    {
                                                        <button class="btn-danger delete-book-btn" @onclick="() => DeleteReview(review)"> <i class="bi bi-trash" style="font-size:15px"></i></button>
                                                        <button class="btn-primary edit-book-btn" @onclick="() => TriggerEditReview(review.ReviewId)">
                                                            <i class="bi bi-pencil" style="font-size:15px"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn-danger delete-book-btn"> <i class="bi bi-megaphone" style="font-size:15px"></i></button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p class="text-center">Book not found.</p>
        }
    </div>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <div class="container" style="display:flex;">
        @if (Book != null)
        {
            <div class="card">
                <div class="card-body">
                    <div class="alert-message">
                        @if (Book.IsUnavailable == true)
                        {
                            <div class="alert alert-danger w-100"> This book is not available</div>
                        }
                        else if (Book.AmountAvailable == 0)
                        {
                            <div class="alert alert-warning w-100"> This book is not available at the moment please wait until one is available</div>
                        }
                        else
                        {
                            <div class="alert alert-success w-100"> This book is available, Amount Available: @Book.AmountAvailable</div>
                        }
                    </div>
                    <div class="hr-inbetween">
                        <hr />
                    </div>
                    <div class="image-container" style="width:18%; height:375px;">
                        @if (ShowFrontImage)
                        {
                            <img src="@(GetImageSource(Book.FrontCover))" style="height:275px" class="front-cover" alt="No front cover available" />
                        }
                        else
                        {
                            <img src="@(GetImageSource(Book.BackCover))" style="height:275px" class="back-cover" alt="Back Cover" />
                        }
                        <hr />
                        <button class="toggle-picture-button" @onclick="ToggleImage"><i class="bi bi-arrow-left-right"></i></button>
                    </div>
                    <div class="BookDescription" style="max-width:50%">
                        <div class="text-center">
                            <h4 class="card-title">@Book.Title</h4>
                        </div>
                        <hr />
                        <p class="w-100">@Book.Description</p>
                    </div>
                    <div class="BookInfo" style="max-width:25%">
                        <div class="text-center">
                            <h4 class="card-title">Book Info</h4>
                            <hr />
                            <p>Amount of pages:<br />@Book.AmountOfPages</p>
                            <hr />
                            <p>ISBN:<br />@Book.ISBN</p>
                            <hr />
                            <p>Genre:<br />@Book.GenreId.GenreName</p>
                            <hr />
                            <p>Language:<br />@Book.LanguageId.LanguageName</p>
                            <hr />
                        </div>
                    </div>
                    <div class="hr-inbetween">
                        <hr />
                    </div>
                    @foreach (var writer in Writers)
                    {
                        <div class="WriterInfo">
                            <hr />
                            <div class="image-container-pfp">
                                <img style="width:100%; height:200px" src="@(GetImageSource(writer.ProfilePicture))" class="writer-image" alt="Writer Image" />
                                <hr />
                                <div class="text-center w-100">
                                    @writer.FirstName @if (writer.MiddleName != null)
                                    {
                                        @writer.MiddleName
                                    } @writer.LastName
                                </div>
                            </div>

                            <div class="AboutTheWriter">
                                <div class="text-center">
                                    <h4>About the writer:</h4>
                                </div>
                                <hr />
                                <p>@writer.Description</p>
                            </div>
                        </div>
                    }
                    <div class="hr-inbetween">
                        <hr />
                    </div>
                    <div class="Reviews-container">
                        <div class="w-100 text-center">
                            <h4>Reviews:@Reviews.Count</h4>
                        </div>
                        <hr />
                        <div class="Reviews">
                            <EditForm Model="review" OnSubmit="AddReview">
                                <ChildContent Context="editFormContext">
                                    <img class="rounded-circle ImagePFP" src="@(GetImageSource(user?.ProfilePicture))" />
                                    <InputText class="custom-margin" @bind-Value="NewReview" placeholder="Write a review" style="width:89%" />
                                    <button class="btn-primary delete-book-btn">
                                        <i class="bi bi-chat-left"></i>
                                    </button>
                                </ChildContent>
                            </EditForm>
                            <hr />
                            @foreach (BookReviews review in Reviews)
                            {
                            
                                    <div class="Review">
                                        <div class="card-review">
                                            <div class="card-body-review">
                                                <img class="rounded-circle ImagePFP" src="@(GetImageSource(review.UserId.ProfilePicture))" />
                                                <div class="The-Review">
                                                    <p class="">@review.UserId.UserName Commented: <br /><hr /> @review.Review</p>
                                                </div>
                                                <div class="ActionButtons">
                                                    @if (review.UserId.Id == user.Id)
                                                    {
                                                        <button class="btn-danger delete-book-btn" @onclick="() => DeleteReview(review)"> <i class="bi bi-trash" style="font-size:15px"></i></button>
                                                        <button class="btn-primary edit-book-btn" @onclick="() => TriggerEditReview(review.ReviewId)">
                                                            <i class="bi bi-pencil" style="font-size:15px"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn-danger delete-book-btn"> <i class="bi bi-megaphone" style="font-size:15px"></i></button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p class="text-center">Book not found.</p>
        }

        <div class="actions">
            <button class="btn-danger delete-book-btn" @onclick="DeleteBook">
                <i class="bi bi-trash" style="font-size:30px"></i>
            </button>
            @if(Book.IsUnavailable == false)
            {
            <button class="btn-danger delete-book-btn" @onclick="SetBookUnavailable">
                <i class="bi bi-x-circle" style="font-size:30px">
                    </i</button>
            }
            else
            {
                <button class="btn-success delete-book-btn" @onclick="SetBookAvailable">
                    <i class="bi bi-check-circle" style="font-size:30px"></i>
                    </button>
            }
            <button class="btn-primary edit-book-btn" @onclick='()=>NavigationManager.NavigateTo($"EditBook/{BookId}")'>
                <i class="bi bi-pencil" style="font-size:30px"></i>
            </button>
            <button class="btn-primary delete-book-btn" @onclick="TriggerAddOrRemoveAmountPopUp">
                <i class="bi bi-arrow-down-up" style="font-size:30px"></i>
            </button>
        </div>
    </div>
</AuthorizeView>

@if(ShowEditReview)
{
    <EditReviewPopUp ReviewId="@reviewIdToEdit" OnClose="TriggerCloseEditReview" />
}

@if(ShowAddOrRemoveAmountPopUp)
{
    <AddOrRemoveAmountAvailable BookId="@BookId" OnClose="TriggerAddOrRemoveAmountPopUpClose" />
}

@code {
    #region Variables
    [Parameter]
    public int BookId { get; set; }

    public Books Book;
    public BookReviews review = new BookReviews();
    public ClaimsPrincipal authUser;
    public ApplicationUser user;

    public List<Writers> Writers = new List<Writers>();
    public List<BookReviews> Reviews = new List<BookReviews>();

    private string NewReview;
    private int reviewIdToEdit;

    private bool ShowFrontImage = true;
    private bool ShowEditReview = false;
    private bool ShowAddOrRemoveAmountPopUp = false;


    #endregion

    #region OnInitialized
    protected async override Task OnInitializedAsync()
    {
        Book = Context.Books
            .Include(book => book.GenreId)
            .Include(book => book.LanguageId)
            .FirstOrDefault(book => book.BookId == BookId);

        Writers = await Context.BooksWriters
            .Include(bw => bw.WritersId)
            .Where(bw => bw.Bookid == Book)
            .Select(bw => bw.WritersId)
            .ToListAsync();

        Reviews = await Context.BookReviews
            .Include(br => br.UserId)
            .Where(br => br.Bookid == Book && !br.IsDeleted)
            .ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        authUser = authState.User;

        user = await UserManager.FindByEmailAsync(authUser.Identity.Name);

    }

    #endregion

    #region ImageStuff

    private string GetImageSource(byte[] imageData)
    {
        if (imageData == null || imageData.Length == 0)
            return null;

        return $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";
    }

    private async void ToggleImage()
    {
        ShowFrontImage = !ShowFrontImage;
    }

    #endregion

    #region ReviewStuff
    private void TriggerEditReview(int reviewId)
    {
        reviewIdToEdit = reviewId;
        ShowEditReview = true;
    }

    private void TriggerCloseEditReview()
    {
        ShowEditReview = false;
    }

    private async void DeleteReview(BookReviews review)
    {
        review.IsDeleted = true;
        Context.BookReviews.Update(review);
        await Context.SaveChangesAsync();
    }

    private async Task AddReview()
    {
        review.Bookid = Book;
        review.Review = NewReview;
        review.UserId = await UserManager.FindByEmailAsync(authUser.Identity.Name);

        Context.BookReviews.Add(review);
        Context.SaveChangesAsync();
        Console.WriteLine("Review added");
    }

    #endregion

    private void TriggerAddOrRemoveAmountPopUp()
    {
        // BookId = BookId;
        ShowAddOrRemoveAmountPopUp = true;
    }

    private void TriggerAddOrRemoveAmountPopUpClose()
    {
        ShowAddOrRemoveAmountPopUp = false;
    }
    #region BookStuff
    private async void SetBookAvailable()
    {
        Book.IsUnavailable = false;
        Context.Books.Update(Book);
        await Context.SaveChangesAsync();
    }

    private async void SetBookUnavailable()
    {
        Book.IsUnavailable = true;
        Context.Books.Update(Book);
        await Context.SaveChangesAsync();
    }

    private async void DeleteBook()
    {
        Book.IsDeleted = true;
        Context.Books.Update(Book);
        await Context.SaveChangesAsync();
        NavigationManager.NavigateTo("/Library");
    }

    #endregion
}
