@using Microsoft.EntityFrameworkCore
@using BookOnShelfBlazor.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Identity
@using BookOnShelfBlazor.Data.Models
@inject ApplicationDbContext Context

@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<style>
    .full-screen-card {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .card-content {
        max-width: 45%;
        max-height: 100%;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
    }
</style>
<EditForm Model="Genre" OnSubmit="AddGenre" FormName="AddGenres">
    <div class="full-screen-card">
        <div class="card-content text-center">
            <div class="row justify-content-end">
                <div class="col-auto">
                    <a class="close-icon-size" @onclick="ClosePopUp"><i class="bi bi-x-circle"></i></a>
                </div>
            </div>
            <h1>Add a Genre!</h1>
            <hr />
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert @GetAlertClass()" role="alert">
                    @Message
                </div>
            }
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="FirstName">Genre:</label>
                        <InputText class="form-control" id="Genre" @bind-Value="Genre.GenreName" />
                    </div>
                </div>
            </div>
            <hr />
            <button type="submit" class="btn btn-primary">Add Genre</button>
        </div>
    </div>
</EditForm>
@code {
    public Genres Genre { get; set; } = new Genres();

    public string Message = "";

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnGenresAdded { get; set; }

    private string GetAlertClass()
    {
        if (Message.StartsWith("Success"))
        {
            return "alert-success";
        }
        else if (Message.StartsWith("Error"))
        {
            return "alert-danger";
        }
        else
        {
            return "alert-warning";
        }
    }

    private void ClosePopUp()
    {
        OnClose.InvokeAsync();
    }

    public async Task AddGenre()
    {
        try
        {
            var ExistingGenre = await Context.Genres.FirstOrDefaultAsync(g => g.GenreName == Genre.GenreName);
            if(ExistingGenre == null)
            {
                await Context.Genres.AddAsync(Genre);
                await Context.SaveChangesAsync();
                await OnGenresAdded.InvokeAsync();
                Message = "Success: Genre added.";
            }
            else
            {
                Message = "Error: Genre already exists.";
                return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
