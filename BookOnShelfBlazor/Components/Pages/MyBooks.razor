@page "/MyBooks"

@using Microsoft.EntityFrameworkCore
@using BookOnShelfBlazor.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Identity
@using BookOnShelfBlazor.Data.Models
@using System.Security.Claims


@inject ApplicationDbContext Context

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer
<h3 class="text-center">MyBooks</h3>
<hr />
<div class="container">
    @foreach(var book in BooksInAwait)
    {
        <div class="container" style="display:flex;">
            <div class="card w-100">
                <div class="card-body">
                    <div class="image-container-MyBooks" style="width:18%; height:375px; position:relative;">
                        <img src="@(GetImageSource(book.BookId.FrontCover))" class="front-cover" alt="Front Cover" />
                        <img src="@(GetImageSource(book.BookId.BackCover))" class="back-cover" alt="Back Cover" style="padding:4px;" />
                    </div>
                    </div>
                </div>
            </div>
    }
</div>

@code {
    private List <BooksInAwaitOfGetting> BooksInAwait = new List<BooksInAwaitOfGetting>();
    private List <BorrowedBooks> BorrowedBooks = new List<BorrowedBooks>();
    private List <BooksHistory> BooksHistory = new List<BooksHistory>();

    private ApplicationUser user;
    private ClaimsPrincipal authUser;

    private bool ShowFrontImage = true;

    protected async override Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        authUser = authState.User;

        user = await UserManager.FindByEmailAsync(authUser.Identity.Name);

        BooksInAwait = await Context.BooksInAwaitOfGetting.Include(b => b.BookId).Where(b => b.UserId == user).ToListAsync();
    }

    private string GetImageSource(byte[] imageData)
    {
        if (imageData == null || imageData.Length == 0)
            return null;

        return $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";
    }

    private async void ToggleImage()
    {
        ShowFrontImage = !ShowFrontImage;
    }

}
