@using Microsoft.EntityFrameworkCore
@using BookOnShelfBlazor.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Identity
@using BookOnShelfBlazor.Data.Models

@inject ApplicationDbContext Context

@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<style>
    .full-screen-card {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .card-content {
        width: 45%;
        max-height: 100%%;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
    }
</style>

<div class="full-screen-card">
    <div class="card-content text-center">
        <div class="row justify-content-end">
            <div class="col-auto">
                <a class="close-icon-size" @onclick="ClosePopUp"><i class="bi bi-x-circle"></i></a>
            </div>
        </div>
        <h4>Add Or Remove The Available Amount for @Book.Title </h4>
        <hr />
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert @GetAlertClass()" role="alert">
                @Message
            </div>
        }
        <div class="col-md-12">
            <div class="form-group">
                <label for="Review">Amount Available Right Now:</label>
                <br />
                <InputNumber class="form-control" id="Review" @bind-Value="@Book.AmountAvailable" />
            </div>
        </div>
        <br />
        <button class="btn btn-primary jump-animation" @onclick="SaveNewAvailableAmount">Save</button>
    </div>

</div>
@code {
    [Parameter]
    public int BookId { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    public Books Book = new Books();

    public string Message = "";

    private void ClosePopUp()
    {
        OnClose.InvokeAsync();
    }

    protected async override Task OnInitializedAsync()
    {
        Book = await Context.Books.FirstOrDefaultAsync(b => b.BookId == BookId);
    }

    public string GetAlertClass()
    {
        if (Message.StartsWith("Success"))
        {
            return "alert-success";
        }
        else if (Message.StartsWith("Error"))
        {
            return "alert-danger";
        }
        else
        {
            return "alert-warning";
        }
    }

    private async Task SaveNewAvailableAmount()
    {
        try
        {
            Context.Update(Book);
            await Context.SaveChangesAsync();
            Message = "Success : Amount Available Changed";
        }
        catch(Exception e)
        {
            Message = "Error :Something went wrong" + e;
        }
    }

}
